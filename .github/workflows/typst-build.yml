name: Build and Deploy Typst Resume

on:
  push:
    branches: [main]
    paths:
      - '**.typ'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3

      - name: Set up Typst
        uses: typst-community/setup-typst@v3

      - name: Install Chinese fonts
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          fc-cache -fv

      - name: Extract metadata
        id: meta
        run: |
          DATE=$(date +%Y-%m-%d)
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%s)
          FILENAME="resume-${DATE}-${COMMIT_HASH}.pdf"
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT

      - name: Compile Typst to PDF
        run: |
          mkdir -p output
          typst compile main.typ output/${{ steps.meta.outputs.filename }}

      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy PDF and update notes
        run: |
          cd gh-pages
          FILENAME="${{ steps.meta.outputs.filename }}"
          MESSAGE="${{ steps.meta.outputs.message }}"

          cp ../output/$FILENAME .

          # Update notes.json
          if [ ! -f notes.json ]; then
            echo '{}' > notes.json
          fi

          jq --arg f "$FILENAME" --arg m "$MESSAGE" '. + {($f): .[$f] // $m}' notes.json > tmp.json && mv tmp.json notes.json

          # Generate index.html
          cat > index.html <<EOF
<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <title>历史简历版本</title>
  <style>
    body { font-family: sans-serif; max-width: 800px; margin: auto; padding: 2em; }
    h1 { margin-bottom: 1em; }
    ul { padding-left: 1em; }
    li { margin-bottom: 1.5em; }
    .note { color: #555; font-size: 0.9em; }
    .pagination { margin-top: 2em; }
    .pagination button { margin: 0 5px; }
  </style>
</head>
<body>
  <h1>历史简历版本</h1>
  <div id="list"></div>
  <div class="pagination" id="pagination"></div>

  <script>
    const notes = $(cat notes.json);
    const files = Object.keys(notes);
    const parsed = files.map(filename => {
      const match = filename.match(/resume-(\\d{4}-\\d{2}-\\d{2})-([a-z0-9]+)\\.pdf/);
      if (!match) return null;
      return {
        filename,
        date: match[1],
        hash: match[2],
        desc: notes[filename],
        timestamp: new Date(match[1]).getTime()
      };
    }).filter(Boolean).sort((a, b) => b.timestamp - a.timestamp);

    const perPage = 10;
    let currentPage = 1;

    function renderPage(page) {
      const start = (page - 1) * perPage;
      const end = start + perPage;
      const slice = parsed.slice(start, end);

      const list = document.getElementById("list");
      list.innerHTML = "<ul>" + slice.map(item => \`
        <li>
          <a href="\${item.filename}">\${item.date} 简历</a><br/>
          <span class="note">\${item.desc}</span>
        </li>\`).join("") + "</ul>";

      const totalPages = Math.ceil(parsed.length / perPage);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = \`
        第 \${page} 页（共 \${totalPages} 页）
        \${page > 1 ? '<button onclick="renderPage(' + (page - 1) + ')">← 上一页</button>' : ''}
        \${page < totalPages ? '<button onclick="renderPage(' + (page + 1) + ')">下一页 →</button>' : ''}
      \`;

      currentPage = page;
    }

    renderPage(1);
  </script>
</body>
</html>
EOF

      - name: Commit and push to gh-pages
        run: |
          cd gh-pages
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          git commit -m "Update resume: ${{ steps.meta.outputs.filename }}" || echo "No changes"
          git push origin gh-pages
